# 1️⃣ Storage: one-gig PVC that binds to the default StorageClass
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tmkms-pvc
spec:
  accessModes: ["ReadWriteOnce"]          # one writer, many readers on same node
  resources:
    requests:
      storage: 1Gi
  # storageClassName: ""                  # omit → use cluster default
  # Optional: let the PV survive even if someone deletes the PVC
  # volumeMode: Filesystem
---
# 2️⃣ Workload: Deployment with an idempotent init-container
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tmkms
  # namespace: <WORKER_NAMESPACE> # Will be applied with -n flag
  labels:
    app: tmkms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tmkms
  template:
    metadata:
      labels:
        app: tmkms
    spec:
      enableServiceLinks: false
      # imagePullSecrets: # Add if your image is in a private registry
      # - name: ghcr-credentials
      containers:
      - name: tmkms
        image: ghcr.io/product-science/tmkms-softsign-with-keygen:0.1.2
        imagePullPolicy: IfNotPresent
        env:
        - name: VALIDATOR_LISTEN_ADDRESS
          value: "tcp://node:26658" # Assumes node service is named 'node' and exposes port 26658 for tmkms
        # Add other TMKMS specific environment variables if needed from a ConfigMap
        # envFrom:
        # - configMapRef:
        # name: join-node-overrides
        ports:
        - containerPort: 26658 # Though tmkms connects out, its good practice to declare if it also listens on a port, even if not exposed via service
                               # The docker-compose doesn't explicitly expose a port for tmkms itself.
        volumeMounts:
        - name: tmkms-data
          mountPath: /root/.tmkms
      volumes:
      - name: tmkms-data
        persistentVolumeClaim:
          claimName: tmkms-pvc
      # nodeSelector: # Usually TMKMS runs alongside its node. Add if you want to pin it.
        # kubernetes.io/hostname: <WORKER_NODE_HOSTNAME> # e.g., k8s-worker-2
